# TreeSet in Java ðŸŒ³

A **TreeSet** in Java is a sorted collection of unique elements. It is implemented using a **self-balancing binary search tree**, typically a **Red-Black tree**. This underlying data structure ensures efficient insertion, deletion, and retrieval operations, even for large datasets.

---

## ðŸš© Key Characteristics
- **Sorted**: Elements are stored in ascending order based on their natural ordering or a custom comparator.
- **Unique**: Duplicate elements are not allowed.
- **Efficient**: Operations like insertion, deletion, and retrieval have a time complexity of **O(log n)**.

---

## ðŸ”§ Common Operations
| **Method**               | **Description**                                                                 |
|---------------------------|---------------------------------------------------------------------------------|
| `add(element)`            | Adds an element to the TreeSet.                                                |
| `remove(element)`         | Removes an element from the TreeSet.                                           |
| `contains(element)`       | Checks if an element exists in the TreeSet.                                    |
| `size()`                  | Returns the number of elements in the TreeSet.                                 |
| `isEmpty()`               | Checks if the TreeSet is empty.                                                |
| `clear()`                 | Removes all elements from the TreeSet.                                         |
| `first()`                 | Returns the first (smallest) element.                                          |
| `last()`                  | Returns the last (largest) element.                                            |
| `headSet(element)`        | Returns a subset of elements less than the specified element.                  |
| `tailSet(element)`        | Returns a subset of elements greater than or equal to the specified element.    |
| `subSet(fromElement, toElement)` | Returns a subset of elements within a specific range.                    |

---

## ðŸ“š Use Cases
1. **Storing and retrieving elements in sorted order**:
   - Example: Maintaining a list of students ranked by scores.
2. **Implementing priority queues**:
   - Example: Scheduling tasks based on deadlines.
3. **Maintaining unique elements in a sorted collection**:
   - Example: Storing unique timestamps in ascending order.

---

## âœ¨ Example Code
```java
import java.util.*;

public class TreeSetExample {
    public static void main(String[] args) {
        TreeSet<Integer> treeSet = new TreeSet<>();

        treeSet.add(5);
        treeSet.add(2);
        treeSet.add(8);
        treeSet.add(1);

        System.out.println("TreeSet: " + treeSet); // Output: [1, 2, 5, 8]
        System.out.println("First Element: " + treeSet.first()); // Output: 1
        System.out.println("Last Element: " + treeSet.last());   // Output: 8
    }
}
